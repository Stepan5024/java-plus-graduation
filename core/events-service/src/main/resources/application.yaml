spring:
  application:
    name: events-service  # Уникальное имя для микросервиса
  config:
    import: "configserver:"  # Используем Config Server для загрузки конфигурации
  cloud:
    config:
      discovery:
        enabled: true  # Разрешаем поиск Config Server через Eureka
        service-id: config-server
      fail-fast: true  # Обрываем загрузку, если конфиг не загружен
      retry:
        use-random-policy: true
        max-interval: 6000  # Интервал между попытками подключения к Config Server

eureka:
  client:
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname:localhost}:${eureka.instance.port:8761}/eureka/  # URL Eureka-сервера
  instance:
    preferIpAddress: true
    hostname: localhost  # Хост для регистрации
    instance-id: "${spring.application.name}:${random.value}"  # Уникальный ID инстанса для Eureka
    leaseRenewalIntervalInSeconds: 10  # Интервал обновления лиза в Eureka

server:
  port: 0  # Автоматический выбор порта (можно заменить фиксированным значением)

logging:
  level:
    root: INFO  # Уровень логирования (можно настроить под нужды проекта)

management:
  endpoints:
    web:
      exposure:
        include: "*"  # Открываем доступ ко всем actuator-эндпоинтам
  endpoint:
    health:
      show-details: ALWAYS  # Показывать подробности в /actuator/health
